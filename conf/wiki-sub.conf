###################
subs_filter  (advisors(?:\.m)?|advisory(?:\.m)?|affcom|am(?:\.m)?|analytics|annual|api(?:\.m)?|ar(?:\.m)?|auditcom|bd(?:\.m)?|be(?:\.m)?|blog|board|boardgovcom|br(?:\.m)?|bugzilla|ca(?:\.m)?|chair|checkuser(?:\.m)?|cn(?:\.m)?|co(?:\.m)?|collab|(?:test-)?commons(?:\.m)?|config-master|cxserver|dbtree|design|developer|diff|dk(?:\.m)?|doc|ec(?:\.m)?|ee(?:\.m)?|electcom(?:\.m)?|etherpad|exec(?:\.m)?|fdc(?:\.m)?|fi(?:\.m)?|foundation(?:\.m)?|ge(?:\.m)?|gerrit|gitlab|gr(?:\.m)?|grafana|grants(?:\.m)?|graphite|hi(?:\.m)?|horizon|id(?:\.m)?|id-internal(?:\.m)?|idp|iegcom(?:\.m)?|il|incubator(?:\.m)?|intake-(?:analytics|logging)|integration|internal|labtestwikitech|legalteam(?:\.m)?|\/\/lists|login(?:\.m)?|logstash|mai(?:\.m)?|maps|meta(?:\.m)?|mk(?:\.m)?|movementroles|mx(?:\.m)?|ng(?:\.m)?|nl(?:\.m)?|no(?:\.m)?|noboard-chapters|noc|nyc(?:\.m)?|nz(?:\.m)?|office(?:\.m)?|ombuds(?:\.m)?|ombudsmen|ores|otrs-wiki(?:\.m)?|outreach(?:\.m)?|pa-us(?:\.m)?|people|performance|phabricator|pl(?:\.m)?|planet|policy|projectcom|pt(?:\.m)?|punjabi(?:\.m)?|quality(?:\.m)?|research|romd(?:\.m)?|rs(?:\.m)?|rt|ru(?:\.m)?|schema|se(?:\.m)?|searchcom|secure|spcom|species(?:\.m)?|static-bugzilla|steward(?:\.m)?|strategy(?:\.m)?|stream|svn|techblog|techconduct|ticket|toolsadmin|tr(?:\.m)?|transitionteam(?:\.m)?|transparency|ua(?:\.m)?|upload|usability|vote(?:\.m)?|vrt-wiki(?:\.m)?|wb(?:\.m)?|wikimania(?:200[5-9]|201[0-8]|team)?(?:\.m)?|wikitech(?:-static)?|www)\.wikimedia\.org $1.example.org ir;
subs_filter  (\.wiki(?:books|data|news|pedia|quote|versity|voyage)|\.?wikisource|\.wiktionary|\.mediawiki)\.org $1.example.org ir;
subs_filter  \/\/wikimedia\.org\/api\/rest_v1\/media\/math\/render\/(png|svg) //latex-$1.example.org ir;
subs_filter  mapServer=mw\.config\.get\(('|\")wgKartographerMapServer\1\) mapServer=$1https://maps.example.org$1 r;
subs_filter  phab\.wmfusercontent\.org phab.example.org ir;
subs_filter  recommend\.wmflabs\.org recommend.wikimirror.net ir;
subs_filter  wma\.wmcloud\.org wma.example.org ir;
subs_filter  xtools\.wmcloud\.org\/api\/ xtools-api.example.org/ ir;
subs_filter  xtools\.wmflabs\.org\/api\/ xtools-api.example.org/ ir;
############bug fix
subs_filter  (?:m\.www\.|www\.m\.)(mediawiki|wikidata)\.org m.$1.example.org r;
subs_filter  '<img\s+?src="(https:)?\/\/(?:m\.www\.|www\.m\.)(mediawiki|wikidata)\.org(\/wiki\/Special:CentralAutoLogin)(\S+?)"(.+?)>' '<img src="$1//m.$2.example.org$3$4"$5>' r;
subs_filter  '<img\s+?src="(https:)?\/\/(m\.)?(\S+?)wikimedia\.org(\/wiki\/Special:CentralAutoLogin)(\S+?)"(.+?)>' '<img src="$1//$3$2example.org$4$5"$6>' r;
subs_filter  '<img\s+?src="(https:)?\/\/(m\.)?(\S+?)(wiki(?:books|data|news|pedia|quote|source|versity|voyage)|wiktionary|mediawiki)\.org(\/wiki\/Special:CentralAutoLogin)(\S+?)"(.+?)>' '<img src="$1//$3$2$4.example.org$5$6"$7>' r;
subs_filter  '<img\s+?src="(https:)?\/\/m\.wikimedia\.org(\/wiki\/Special:CentralAutoLogin)(\S+?)"(.+?)>' '<img src="$1//foundation.m.example.org$2$3"$4>' r;
subs_filter  '<img\s+?src="(https:)?\/\/www\.wikimedia\.org(\/wiki\/Special:CentralAutoLogin)(\S+?)"(.+?)>' '<img src="$1//foundation.example.org$2$3"$4>' r;
subs_filter  '<img\s+?src="(https:)?\/\/(m\.|www\.)(wikidata\.example\.org\/wiki\/Special:CentralAutoLogin)(\S+?)"(.+?)>' '<img src="$1//$2$3$4"$5>' r;
subs_filter  '<img\s+?src="(https:)?\/\/(m\.|www\.)(wiki(?:books|news|pedia|quote|source|versity|voyage)|wiktionary)(\.example\.org\/wiki\/Special:CentralAutoLogin)(\S+?)"(.+?)>' '<img src="$1//en.$2$3$4$5"$6>' r;
###################
set          $init "<noscript><style>html{all:revert!important}body{display:none!important}*::before{content:'WikiMirror load failed, please try reloading page.';align-items:center;display:flex;filter:inherit;font:.5em bold;height:100%;justify-content:center;position:absolute;text-align:center;white-space:pre;width:100%}</style></noscript><script onerror=\"document.documentElement.innerHTML=document.getElementsByTagName('noscript')[0].innerHTML\" src=\"/wikimirror.js\"></script><style id=\"wikimirror-css-anon-hide\">.ext-discussiontools-emptystate,.ext-discussiontools-init-new-topic,.ext-discussiontools-init-replylink-buttons,.flow-reply-link,.flow-ui-edit-title-link,.flow-ui-replyWidget,.flow-ui-summarize-topic-link,.header-action .continue,.minerva-talk-add-button,.minerva-user-menu-list>li:not(:last-child),.mw-diff-edit,.mw-diff-undo,.mw-editsection,.mw-history-undo,.mw-rollback-link,.nv-edit,.ve-ui-toolbar-group-save,.wb-langlinks-link,.wikiEditor-ui-top,#ca-addsection,#ca-cb-create-account,#ca-edit,#ca-move,#ca-ve-edit,#page-actions-edit,#wpSaveWidget,#mw-createaccount-cta,#p-createaccount,#pt-anoncontribs,#pt-anontalk,#pt-createaccount,#pt-createaccount-2,#userlogin2{display:none!important;height:0!important;margin:0!important;padding:0!important;visibility:hidden!important;width:0!important}</style>\n";
subs_filter  '(<meta\scharset="?\S+?"?\s*?\/?>)(?!(?:<meta\sproperty.+?>|<meta\scontent\S+?\sproperty.+?>))' "$init$1" ir;
subs_filter  '(<meta\shttp-equiv="?Content-Type"?\scontent="?.+?"?\s*?\/?>)(?!<meta\sproperty.+?>)' "$init$1" ir;
subs_filter  "<code>Request\sfrom\s((?:(?:1[0-9][0-9]\.)|(?:2[0-4][0-9]\.)|(?:25[0-5]\.)|(?:[1-9][0-9]\.)|(?:[0-9]\.)){3}(?:(?:1[0-9][0-9])|(?:2[0-4][0-9])|(?:25[0-5])|(?:[1-9][0-9])|(?:[0-9])))(.+?)" "<code>Request from $remote_addr$2<br>Reverse proxy: example.org ($1) " r;
###################
set         $fn "WikiMirror.getRealText";
sub_filter  '"https":["mediawiki.org",' '"https":["example.org","mediawiki.org",'; #wgGraphAllowedDomains
sub_filter  '            "mediawiki.org",' '            "example.org",\n            "mediawiki.org",'; #wgGraphAllowedDomains
sub_filter  "request.open('GET',url,async);if(request.setRequestHeader)" "url=url.replace(/^(?:https?:)?(?:\/\/)?wikimedia\.org/,'//pageviews.example.org');url=url.match(/(.+?\.org)(.+)/)[1]+$fn(url.match(/(.+?\.org)(.+)/)[2]);request.open('GET',url,async);if(request.setRequestHeader)";
sub_filter  "  request.open('GET', url, async);" "  url = url.replace(/^(?:https?:)?(?:\/\/)?wikimedia\.org/, '//pageviews.example.org');\n  url = url.match(/(.+?\.org)(.+)/)[1] + $fn(url.match(/(.+?\.org)(.+)/)[2]);\n  request.open('GET', url, async);";
sub_filter  "'url': buildURI(ajax, {}) " "'url': ((url = buildURI(ajax, {})) => {\n				url.host = 'pageviews.example.org';\n				return url\n			})()\n		";
sub_filter  "\.wikipedia\.org" "\.wikipedia\.(?:example\.)?org";
sub_filter  '"ext.gadget.mirrorsite",' "";

sub_filter_once    off;
sub_filter_types   *;
subs_filter_types  *;